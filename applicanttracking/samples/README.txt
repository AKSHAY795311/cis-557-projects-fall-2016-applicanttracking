We decided on having separate endpoints for each portion of the application because we imagined that each section of the application would be on a separate page. This makes it easier to handle if there are multiple objects of the same type for one application. For example, if an appicant has multiple education information or multiple experience information then all that needs to be done is multiple post requests to the same endpoint instead of having to create a new one that handles a form with multiple experience fields. In addition, we added extensive documentation to our github so that the Germany team could test out our application and request any changes to our existing model schema and endpoints. The documentation is located here: https://github.com/cit-upenn/cis-557-projects-fall-2016-applicanttracking/wiki. 

We also modified the questions model to add columns to allow for a mp4 video attachment. We also created an upload endpoint that so that the Germany team can upload videos for a specific question object. In order to retrieve the videos, the path of the video is added as a field in the object returned by a GET request if there is a video for the question object. A curl request on that path will download the video. We made these modifications for video during this iteration because the Germany team didn't finalize this feature until this iteration. Furthermore, we added two more models to hold user and admin credentials in order to add a login feature. We created separate devise models as the mixing devise functionality (i.e. logging in and registering) were often conflicting with the validations we put in place for the user and admin models. Abstracting out the credential information this way resolved our issues. It is also important to note that the user and admin credentials are separated (and hence stored separately) because we felt that the webpages that users and admins could access with their credentials should be divided this way.

As of this iteration, the models/controllers for awards, educations, experiences, extracurriculars, users are tentatively finalized based on feedback from the Germany team. We are still in the process of finalizing the questions, answers, and admins models/controllers based on feedback from the Germany team. We are also considering removing the github and linkedin model/controllers because we might not need them at all. If we do remove them, they will be in the next iteration.

Most of the missing functionality involves the views since we haven't covered it in class yet. The final iteration will mainly focus on the views as well as any controllers necessary to populate the views with the necessary information. More specifically, the frontend for the application process itself as well as the admin homepage/analytics. Some of these views are also blocked by the Germany team because we need feedback from Daimler about what the UI should look like, especially for the admin pages.